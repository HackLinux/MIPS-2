int image[512*512];

void process(x,y)
{
	int i,j;
	p=image[x,y];
	for(i=0;i<8;i++){
		for(j=0;j<8;j++){
			image[x+i,y+j]=p;
		}
	}
}

void main()
{
	for(x=0;x<64;x++){
		for(y=0;y<64;y++){
			process(x*8,y*8);
		}
	}
}

r1:x
r2:y
r3:addressing	=(y<<9+x)<<2
r4:image[x,y]
r5:i
r6:j
r7:8
r8:64
r9:x*8
r10:y*8

//main
//r7=8
001001_00000_00111_0000000000001000	//0: addiu r0,8,r7
//r8=64
001001_00000_01000_0000000001000000	//1: addiu r0,64,r8

//y(r1)=0
000000_00000_00000_00001_00000_100000	//2: add r0,r0,r1
//for_y
//64<y
000110_01000_00001_0000000000001010	//3: ble r8,r1,_end_for_y
//inner
//x(r2)=0
000000_00000_00000_00010_00000_100000	//4: add r0,r0,r2
//for_x
//64<x
000110_01000_00010_0000000000000110	//5: ble r8,r2,_end_for_x
//inner
//r9=y*8
000000_00000_00001_01001_00011_000000	//6: sll r1,3,r9
//r10=x*8
000000_00000_00010_01010_00011_000000	//7: sll r2,3,r10
//call f
000011_00000000000000000000001110	//8: jal f
//end inner
//x(r2)+=1
001001_00010_00010_0000000000000001	//9: addiu r2,1,r2
//jump to for_x
000100_00000_00000_1111111111111011	//10: beq r0,r0,_for_x
//end_for_x end_inner
//x(r1)+=1
001001_00001_00001_0000000000000001	//11: addiu r1,1,r1
//jump to for_y
000100_00000_00000_1111111111110111	//12: beq r0,r0,_for_y
//end_for_y
//end hang
000100_00000_00000_0000000000000000	//13: beq r0,r0,0

//f
//r3=(r9<<9+r10)<<2
000000_00000_01001_00011_01001_000000	//14: sll r3,9,r3
000000_00011_01010_00011_00000_100000	//15: add r3,r10,r3
000000_00000_00011_00011_00010_000000	//16: sll r3,2,r3
//r4=image[r3];
100011_00011_00100_0000000000000000	//17: lw r3(0),r4

//i(r5)=0
000000_00000_00000_00101_00000_100000	//18: add r0,r0,r5
//for_i
//8<i
000110_00111_00101_0000000000001101	//19: ble r7,r5,_end_for_i

//inner
//j(r6)=0
000000_00000_00000_00110_00000_100000	//20: add r0,r0,r6
//for_j
//8<j
000110_00111_00110_0000000000001001	//21: ble r7,r6,_end_for_j
//inner
//r3=((r9+i)<<9+(r10+j))<<2
000000_01001_00101_00011_00000_100000	//22: add r9,r5,r3
000000_00000_00011_00011_01001_000000	//23: sll r3,9,r3
000000_00011_00110_00011_00000_100000	//24: add r3,r6,r3
000000_00011_01010_00011_00000_100000	//25: add r3,r10,r3
000000_00000_00011_00011_00010_000000	//26: sll r3,2,r3
//image[r3]=r4;
101011_00011_00100_0000000000000000	//27: sw r3(0),r4
//end inner
//j(r6)+=1
001001_00110_00110_0000000000000001	//28: addiu r6,1,r6
//jump to for_j
000100_00000_00000_1111111111111000	//29: beq r0,r0,_for_j
//end_for_j

//end inner
//i(r5)+=1
001001_00101_00101_0000000000000001	//30: addiu r5,1,r5
//jump to for_i
000100_00000_00000_1111111111110100	//31: beq r0,r0,_for_i
//end_for_i
//jr 31
000000_11111_00000_00000_00000_001000	//32: jr 31

